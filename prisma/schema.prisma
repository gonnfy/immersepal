generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

model User {
  id        String     @id @db.Uuid
  email     String?    @unique
  name      String?
  avatarUrl String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  decks     Deck[]
  studyLogs StudyLog[]
}

model Deck {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       Card[]

  @@unique([userId, name])
  @@index([userId])
}

model Card {
  id           String          @id @default(cuid())
  front        String
  back         String
  interval     Int             @default(0)
  easeFactor   Float           @default(2.5)
  nextReviewAt DateTime        @default(now()) @db.Timestamptz(6)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deckId       String
  deck         Deck            @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studyLogs    StudyLog[]
  aiContents   AICardContent[]

  @@index([deckId])
  @@index([nextReviewAt])
}

model AICardContent {
  id          String        @id @default(cuid())
  cardId      String
  contentType AiContentType
  language    String
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  card        Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([cardId, contentType, language])
  @@index([cardId])
  @@index([cardId, contentType])
}

model StudyLog {
  id                 String      @id @default(cuid())
  reviewedAt         DateTime    @default(now())
  rating             StudyRating
  previousInterval   Int
  previousEaseFactor Float
  newInterval        Int
  newEaseFactor      Float
  nextReviewAt       DateTime
  userId             String      @db.Uuid
  cardId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  card               Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([cardId])
  @@index([reviewedAt])
}

enum AiContentType {
  EXPLANATION
  TRANSLATION
  AUDIO_PRIMARY
  AUDIO_SECONDARY
  AUDIO_EXPLANATION
  AUDIO_TRANSLATION
}

enum StudyRating {
  AGAIN
  HARD
  GOOD
  EASY
}
